// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @default(now()) @updatedAt
    categories    Category[]
    Menus         Menu[]

    @@unique([id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Item {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId  String
    price1      Float
    price2      Float?
    reverse     Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt
}

model Category {
    id          String   @id @default(cuid())
    name        String
    description String?
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    menu        Menu     @relation(fields: [menuId], references: [id])
    menuId      String
    itemSort    Int[]
    items       Item[]
    column      Int      @default(0)
    order       Int      @default(0)
    reverse     Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    @@unique([id, userId])
}

model Menu {
    id          String     @id @default(cuid())
    name        String
    description String?
    image       String?
    categories  Category[]
    user        User       @relation(fields: [userId], references: [id])
    userId      String
    column      Int        @default(2)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @default(now()) @updatedAt

    @@unique([id, userId])
}
